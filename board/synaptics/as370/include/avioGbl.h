//////
/// don't edit! auto-generated by docc: avioGbl.h
////////////////////////////////////////////////////////////
#ifndef avioGbl_h
#define avioGbl_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE vsipll                                   (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * PLL Control register
///               ###
///               %unsigned 1  PD                        0x0
///                                    ###
///                                    * PLL Power Down Signal.
///                                    * 1: PLL power down;
///                                    * 0: normal operation
///                                    ###
///               %unsigned 1  RESETN                    0x1
///                                    ###
///                                    * Resets the SSC & Fraction Function When Low
///                                    ###
///               %unsigned 6  DM                        0x1
///                                    ###
///                                    * Reference Input Divider Control Pins. Set the reference divider factor from 1 to 63
///                                    ###
///               %unsigned 11 DN                        0x20
///                                    ###
///                                    * Feedback Divider Control Pins. Set the feedback divider factor from 16 to 2048
///                                    ###
///               %unsigned 2  MODE                      0x0
///                                    ###
///                                    * Operation Mode Select
///                                    * 00: integer mode;
///                                    * 01: fraction mode;
///                                    * 10: spread spectrum mode;
///                                    * 11: reserved.
///                                    ###
///               %unsigned 1  READY_BP                  0x0
///                                    ###
///                                    * READY_bypass signal
///                                    * 0:FRAC_READY work normal
///                                    * 1:directly bypass FRAC<23:0> to PLL
///                                    ###
///               %unsigned 1  FRAC_READY                0x1
///                                    ###
///                                    * FRAC value ready flag.
///                                    ###
///               %%        9          # Stuffing bits...
///     # 0x00004 ctrl1                
///               %unsigned 24 FRAC                      0x0
///                                    ###
///                                    * Fractional Portion of DN Value
///                                    ###
///               %%        8          # Stuffing bits...
///     # 0x00008 ctrl2                
///               %unsigned 11 SSRATE                    0x0
///                                    ###
///                                    * Spreading Frequency Control. Set the triangle modulation frequency.
///                                    ###
///               %%        21         # Stuffing bits...
///     # 0x0000C ctrl3                
///               %unsigned 24 SLOPE                     0x0
///                                    ###
///                                    * Spreading Slope Control.
///                                    ###
///               %unsigned 1  PDDP                      0x0
///                                    ###
///                                    * DP Power Down Signal. (0.8V signal)
///                                    * 1: DP power down;
///                                    * 0: DP normal operation
///                                    ###
///               %unsigned 3  DP                        0x4
///                                    ###
///                                    * Output Divider1 Control Pins. Set the post divider factor from 1 to 7
///                                    ###
///               %unsigned 1  PDDP1                     0x0
///                                    ###
///                                    * DP1 Power Down Signal. (0.8V signal)
///                                    * 1: DP1 power down;
///                                    * 0: DP1 normal operation
///                                    ###
///               %unsigned 3  DP1                       0x4
///                                    ###
///                                    * Output Divider1 Control Pins. Set the post divider factor from 1 to 7
///                                    ###
///     # 0x00010 ctrl4                
///               %unsigned 1  BYPASS                    0x0
///                                    ###
///                                    * PLL BYPASS Signal
///                                    * 1: PLL bypass
///                                    * 0: normal operation
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00014 status               (R-)
///               ###
///               * PLL status register
///               ###
///               %unsigned 1  LOCK                      
///                                    ###
///                                    * Output. Lock detection
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:      92b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_vsipll
#define h_vsipll (){}

    #define     RA_vsipll_ctrl                                 0x0000

    #define     BA_vsipll_ctrl_PD                              0x0000
    #define     B16vsipll_ctrl_PD                              0x0000
    #define   LSb32vsipll_ctrl_PD                                 0
    #define   LSb16vsipll_ctrl_PD                                 0
    #define       bvsipll_ctrl_PD                              1
    #define   MSK32vsipll_ctrl_PD                                 0x00000001

    #define     BA_vsipll_ctrl_RESETN                          0x0000
    #define     B16vsipll_ctrl_RESETN                          0x0000
    #define   LSb32vsipll_ctrl_RESETN                             1
    #define   LSb16vsipll_ctrl_RESETN                             1
    #define       bvsipll_ctrl_RESETN                          1
    #define   MSK32vsipll_ctrl_RESETN                             0x00000002

    #define     BA_vsipll_ctrl_DM                              0x0000
    #define     B16vsipll_ctrl_DM                              0x0000
    #define   LSb32vsipll_ctrl_DM                                 2
    #define   LSb16vsipll_ctrl_DM                                 2
    #define       bvsipll_ctrl_DM                              6
    #define   MSK32vsipll_ctrl_DM                                 0x000000FC

    #define     BA_vsipll_ctrl_DN                              0x0001
    #define     B16vsipll_ctrl_DN                              0x0000
    #define   LSb32vsipll_ctrl_DN                                 8
    #define   LSb16vsipll_ctrl_DN                                 8
    #define       bvsipll_ctrl_DN                              11
    #define   MSK32vsipll_ctrl_DN                                 0x0007FF00

    #define     BA_vsipll_ctrl_MODE                            0x0002
    #define     B16vsipll_ctrl_MODE                            0x0002
    #define   LSb32vsipll_ctrl_MODE                               19
    #define   LSb16vsipll_ctrl_MODE                               3
    #define       bvsipll_ctrl_MODE                            2
    #define   MSK32vsipll_ctrl_MODE                               0x00180000

    #define     BA_vsipll_ctrl_READY_BP                        0x0002
    #define     B16vsipll_ctrl_READY_BP                        0x0002
    #define   LSb32vsipll_ctrl_READY_BP                           21
    #define   LSb16vsipll_ctrl_READY_BP                           5
    #define       bvsipll_ctrl_READY_BP                        1
    #define   MSK32vsipll_ctrl_READY_BP                           0x00200000

    #define     BA_vsipll_ctrl_FRAC_READY                      0x0002
    #define     B16vsipll_ctrl_FRAC_READY                      0x0002
    #define   LSb32vsipll_ctrl_FRAC_READY                         22
    #define   LSb16vsipll_ctrl_FRAC_READY                         6
    #define       bvsipll_ctrl_FRAC_READY                      1
    #define   MSK32vsipll_ctrl_FRAC_READY                         0x00400000

    #define     RA_vsipll_ctrl1                                0x0004

    #define     BA_vsipll_ctrl_FRAC                            0x0004
    #define     B16vsipll_ctrl_FRAC                            0x0004
    #define   LSb32vsipll_ctrl_FRAC                               0
    #define   LSb16vsipll_ctrl_FRAC                               0
    #define       bvsipll_ctrl_FRAC                            24
    #define   MSK32vsipll_ctrl_FRAC                               0x00FFFFFF

    #define     RA_vsipll_ctrl2                                0x0008

    #define     BA_vsipll_ctrl_SSRATE                          0x0008
    #define     B16vsipll_ctrl_SSRATE                          0x0008
    #define   LSb32vsipll_ctrl_SSRATE                             0
    #define   LSb16vsipll_ctrl_SSRATE                             0
    #define       bvsipll_ctrl_SSRATE                          11
    #define   MSK32vsipll_ctrl_SSRATE                             0x000007FF

    #define     RA_vsipll_ctrl3                                0x000C

    #define     BA_vsipll_ctrl_SLOPE                           0x000C
    #define     B16vsipll_ctrl_SLOPE                           0x000C
    #define   LSb32vsipll_ctrl_SLOPE                              0
    #define   LSb16vsipll_ctrl_SLOPE                              0
    #define       bvsipll_ctrl_SLOPE                           24
    #define   MSK32vsipll_ctrl_SLOPE                              0x00FFFFFF

    #define     BA_vsipll_ctrl_PDDP                            0x000F
    #define     B16vsipll_ctrl_PDDP                            0x000E
    #define   LSb32vsipll_ctrl_PDDP                               24
    #define   LSb16vsipll_ctrl_PDDP                               8
    #define       bvsipll_ctrl_PDDP                            1
    #define   MSK32vsipll_ctrl_PDDP                               0x01000000

    #define     BA_vsipll_ctrl_DP                              0x000F
    #define     B16vsipll_ctrl_DP                              0x000E
    #define   LSb32vsipll_ctrl_DP                                 25
    #define   LSb16vsipll_ctrl_DP                                 9
    #define       bvsipll_ctrl_DP                              3
    #define   MSK32vsipll_ctrl_DP                                 0x0E000000

    #define     BA_vsipll_ctrl_PDDP1                           0x000F
    #define     B16vsipll_ctrl_PDDP1                           0x000E
    #define   LSb32vsipll_ctrl_PDDP1                              28
    #define   LSb16vsipll_ctrl_PDDP1                              12
    #define       bvsipll_ctrl_PDDP1                           1
    #define   MSK32vsipll_ctrl_PDDP1                              0x10000000

    #define     BA_vsipll_ctrl_DP1                             0x000F
    #define     B16vsipll_ctrl_DP1                             0x000E
    #define   LSb32vsipll_ctrl_DP1                                29
    #define   LSb16vsipll_ctrl_DP1                                13
    #define       bvsipll_ctrl_DP1                             3
    #define   MSK32vsipll_ctrl_DP1                                0xE0000000

    #define     RA_vsipll_ctrl4                                0x0010

    #define     BA_vsipll_ctrl_BYPASS                          0x0010
    #define     B16vsipll_ctrl_BYPASS                          0x0010
    #define   LSb32vsipll_ctrl_BYPASS                             0
    #define   LSb16vsipll_ctrl_BYPASS                             0
    #define       bvsipll_ctrl_BYPASS                          1
    #define   MSK32vsipll_ctrl_BYPASS                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_vsipll_status                               0x0014

    #define     BA_vsipll_status_LOCK                          0x0014
    #define     B16vsipll_status_LOCK                          0x0014
    #define   LSb32vsipll_status_LOCK                             0
    #define   LSb16vsipll_status_LOCK                             0
    #define       bvsipll_status_LOCK                          1
    #define   MSK32vsipll_status_LOCK                             0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_vsipll {
    ///////////////////////////////////////////////////////////
    #define   GET32vsipll_ctrl_PD(r32)                         _BFGET_(r32, 0, 0)
    #define   SET32vsipll_ctrl_PD(r32,v)                       _BFSET_(r32, 0, 0,v)
    #define   GET16vsipll_ctrl_PD(r16)                         _BFGET_(r16, 0, 0)
    #define   SET16vsipll_ctrl_PD(r16,v)                       _BFSET_(r16, 0, 0,v)

    #define   GET32vsipll_ctrl_RESETN(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32vsipll_ctrl_RESETN(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16vsipll_ctrl_RESETN(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16vsipll_ctrl_RESETN(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define   GET32vsipll_ctrl_DM(r32)                         _BFGET_(r32, 7, 2)
    #define   SET32vsipll_ctrl_DM(r32,v)                       _BFSET_(r32, 7, 2,v)
    #define   GET16vsipll_ctrl_DM(r16)                         _BFGET_(r16, 7, 2)
    #define   SET16vsipll_ctrl_DM(r16,v)                       _BFSET_(r16, 7, 2,v)

    #define   GET32vsipll_ctrl_DN(r32)                         _BFGET_(r32,18, 8)
    #define   SET32vsipll_ctrl_DN(r32,v)                       _BFSET_(r32,18, 8,v)

    #define   GET32vsipll_ctrl_MODE(r32)                       _BFGET_(r32,20,19)
    #define   SET32vsipll_ctrl_MODE(r32,v)                     _BFSET_(r32,20,19,v)
    #define   GET16vsipll_ctrl_MODE(r16)                       _BFGET_(r16, 4, 3)
    #define   SET16vsipll_ctrl_MODE(r16,v)                     _BFSET_(r16, 4, 3,v)

    #define   GET32vsipll_ctrl_READY_BP(r32)                   _BFGET_(r32,21,21)
    #define   SET32vsipll_ctrl_READY_BP(r32,v)                 _BFSET_(r32,21,21,v)
    #define   GET16vsipll_ctrl_READY_BP(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16vsipll_ctrl_READY_BP(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define   GET32vsipll_ctrl_FRAC_READY(r32)                 _BFGET_(r32,22,22)
    #define   SET32vsipll_ctrl_FRAC_READY(r32,v)               _BFSET_(r32,22,22,v)
    #define   GET16vsipll_ctrl_FRAC_READY(r16)                 _BFGET_(r16, 6, 6)
    #define   SET16vsipll_ctrl_FRAC_READY(r16,v)               _BFSET_(r16, 6, 6,v)

    #define     w32vsipll_ctrl                                 {\
            UNSG32 uctrl_PD                                    :  1;\
            UNSG32 uctrl_RESETN                                :  1;\
            UNSG32 uctrl_DM                                    :  6;\
            UNSG32 uctrl_DN                                    : 11;\
            UNSG32 uctrl_MODE                                  :  2;\
            UNSG32 uctrl_READY_BP                              :  1;\
            UNSG32 uctrl_FRAC_READY                            :  1;\
            UNSG32 RSVDx0_b23                                  :  9;\
          }
    union { UNSG32 u32vsipll_ctrl;
            struct w32vsipll_ctrl;
          };
    #define   GET32vsipll_ctrl_FRAC(r32)                       _BFGET_(r32,23, 0)
    #define   SET32vsipll_ctrl_FRAC(r32,v)                     _BFSET_(r32,23, 0,v)

    #define     w32vsipll_ctrl1                                {\
            UNSG32 uctrl_FRAC                                  : 24;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32vsipll_ctrl1;
            struct w32vsipll_ctrl1;
          };
    #define   GET32vsipll_ctrl_SSRATE(r32)                     _BFGET_(r32,10, 0)
    #define   SET32vsipll_ctrl_SSRATE(r32,v)                   _BFSET_(r32,10, 0,v)
    #define   GET16vsipll_ctrl_SSRATE(r16)                     _BFGET_(r16,10, 0)
    #define   SET16vsipll_ctrl_SSRATE(r16,v)                   _BFSET_(r16,10, 0,v)

    #define     w32vsipll_ctrl2                                {\
            UNSG32 uctrl_SSRATE                                : 11;\
            UNSG32 RSVDx8_b11                                  : 21;\
          }
    union { UNSG32 u32vsipll_ctrl2;
            struct w32vsipll_ctrl2;
          };
    #define   GET32vsipll_ctrl_SLOPE(r32)                      _BFGET_(r32,23, 0)
    #define   SET32vsipll_ctrl_SLOPE(r32,v)                    _BFSET_(r32,23, 0,v)

    #define   GET32vsipll_ctrl_PDDP(r32)                       _BFGET_(r32,24,24)
    #define   SET32vsipll_ctrl_PDDP(r32,v)                     _BFSET_(r32,24,24,v)
    #define   GET16vsipll_ctrl_PDDP(r16)                       _BFGET_(r16, 8, 8)
    #define   SET16vsipll_ctrl_PDDP(r16,v)                     _BFSET_(r16, 8, 8,v)

    #define   GET32vsipll_ctrl_DP(r32)                         _BFGET_(r32,27,25)
    #define   SET32vsipll_ctrl_DP(r32,v)                       _BFSET_(r32,27,25,v)
    #define   GET16vsipll_ctrl_DP(r16)                         _BFGET_(r16,11, 9)
    #define   SET16vsipll_ctrl_DP(r16,v)                       _BFSET_(r16,11, 9,v)

    #define   GET32vsipll_ctrl_PDDP1(r32)                      _BFGET_(r32,28,28)
    #define   SET32vsipll_ctrl_PDDP1(r32,v)                    _BFSET_(r32,28,28,v)
    #define   GET16vsipll_ctrl_PDDP1(r16)                      _BFGET_(r16,12,12)
    #define   SET16vsipll_ctrl_PDDP1(r16,v)                    _BFSET_(r16,12,12,v)

    #define   GET32vsipll_ctrl_DP1(r32)                        _BFGET_(r32,31,29)
    #define   SET32vsipll_ctrl_DP1(r32,v)                      _BFSET_(r32,31,29,v)
    #define   GET16vsipll_ctrl_DP1(r16)                        _BFGET_(r16,15,13)
    #define   SET16vsipll_ctrl_DP1(r16,v)                      _BFSET_(r16,15,13,v)

    #define     w32vsipll_ctrl3                                {\
            UNSG32 uctrl_SLOPE                                 : 24;\
            UNSG32 uctrl_PDDP                                  :  1;\
            UNSG32 uctrl_DP                                    :  3;\
            UNSG32 uctrl_PDDP1                                 :  1;\
            UNSG32 uctrl_DP1                                   :  3;\
          }
    union { UNSG32 u32vsipll_ctrl3;
            struct w32vsipll_ctrl3;
          };
    #define   GET32vsipll_ctrl_BYPASS(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32vsipll_ctrl_BYPASS(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16vsipll_ctrl_BYPASS(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16vsipll_ctrl_BYPASS(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32vsipll_ctrl4                                {\
            UNSG32 uctrl_BYPASS                                :  1;\
            UNSG32 RSVDx10_b1                                  : 31;\
          }
    union { UNSG32 u32vsipll_ctrl4;
            struct w32vsipll_ctrl4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vsipll_status_LOCK(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32vsipll_status_LOCK(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16vsipll_status_LOCK(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16vsipll_status_LOCK(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32vsipll_status                               {\
            UNSG32 ustatus_LOCK                                :  1;\
            UNSG32 RSVDx14_b1                                  : 31;\
          }
    union { UNSG32 u32vsipll_status;
            struct w32vsipll_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_vsipll;

    typedef union  T32vsipll_ctrl
          { UNSG32 u32;
            struct w32vsipll_ctrl;
                 } T32vsipll_ctrl;
    typedef union  T32vsipll_ctrl1
          { UNSG32 u32;
            struct w32vsipll_ctrl1;
                 } T32vsipll_ctrl1;
    typedef union  T32vsipll_ctrl2
          { UNSG32 u32;
            struct w32vsipll_ctrl2;
                 } T32vsipll_ctrl2;
    typedef union  T32vsipll_ctrl3
          { UNSG32 u32;
            struct w32vsipll_ctrl3;
                 } T32vsipll_ctrl3;
    typedef union  T32vsipll_ctrl4
          { UNSG32 u32;
            struct w32vsipll_ctrl4;
                 } T32vsipll_ctrl4;
    typedef union  T32vsipll_status
          { UNSG32 u32;
            struct w32vsipll_status;
                 } T32vsipll_status;
    ///////////////////////////////////////////////////////////

    typedef union  Tvsipll_ctrl
          { UNSG32 u32[5];
            struct {
            struct w32vsipll_ctrl;
            struct w32vsipll_ctrl1;
            struct w32vsipll_ctrl2;
            struct w32vsipll_ctrl3;
            struct w32vsipll_ctrl4;
                   };
                 } Tvsipll_ctrl;
    typedef union  Tvsipll_status
          { UNSG32 u32[1];
            struct {
            struct w32vsipll_status;
                   };
                 } Tvsipll_status;

    ///////////////////////////////////////////////////////////
     SIGN32 vsipll_drvrd(SIE_vsipll *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 vsipll_drvwr(SIE_vsipll *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void vsipll_reset(SIE_vsipll *p);
     SIGN32 vsipll_cmp  (SIE_vsipll *p, SIE_vsipll *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define vsipll_check(p,pie,pfx,hLOG) vsipll_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define vsipll_print(p,    pfx,hLOG) vsipll_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: vsipll
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE avPll                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 vsipll               
///               $vsipll              vsipll            REG          
///                                    ###
///                                    * All registers for PLL
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:      92b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_avPll
#define h_avPll (){}

    #define     RA_avPll_vsipll                                0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_avPll {
    ///////////////////////////////////////////////////////////
              SIE_vsipll                                       ie_vsipll;
    ///////////////////////////////////////////////////////////
    } SIE_avPll;

    ///////////////////////////////////////////////////////////
     SIGN32 avPll_drvrd(SIE_avPll *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 avPll_drvwr(SIE_avPll *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void avPll_reset(SIE_avPll *p);
     SIGN32 avPll_cmp  (SIE_avPll *p, SIE_avPll *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define avPll_check(p,pie,pfx,hLOG) avPll_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define avPll_print(p,    pfx,hLOG) avPll_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: avPll
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AVIO_debug_ctrl         biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Ctrl0                (P)
///               %unsigned 4  debug_ctrl0               0x0
///                                    ###
///                                    * AVIO debug control [3:0] : connected to pad_pin_mux
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       4b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AVIO_debug_ctrl
#define h_AVIO_debug_ctrl (){}

    #define     RA_AVIO_debug_ctrl_Ctrl0                       0x0000

    #define     BA_AVIO_debug_ctrl_Ctrl0_debug_ctrl0           0x0000
    #define     B16AVIO_debug_ctrl_Ctrl0_debug_ctrl0           0x0000
    #define   LSb32AVIO_debug_ctrl_Ctrl0_debug_ctrl0              0
    #define   LSb16AVIO_debug_ctrl_Ctrl0_debug_ctrl0              0
    #define       bAVIO_debug_ctrl_Ctrl0_debug_ctrl0           4
    #define   MSK32AVIO_debug_ctrl_Ctrl0_debug_ctrl0              0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AVIO_debug_ctrl {
    ///////////////////////////////////////////////////////////
    #define   GET32AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r32)      _BFGET_(r32, 3, 0)
    #define   SET32AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r32,v)    _BFSET_(r32, 3, 0,v)
    #define   GET16AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r16)      _BFGET_(r16, 3, 0)
    #define   SET16AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r16,v)    _BFSET_(r16, 3, 0,v)

    #define     w32AVIO_debug_ctrl_Ctrl0                       {\
            UNSG32 uCtrl0_debug_ctrl0                          :  4;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32AVIO_debug_ctrl_Ctrl0;
            struct w32AVIO_debug_ctrl_Ctrl0;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AVIO_debug_ctrl;

    typedef union  T32AVIO_debug_ctrl_Ctrl0
          { UNSG32 u32;
            struct w32AVIO_debug_ctrl_Ctrl0;
                 } T32AVIO_debug_ctrl_Ctrl0;
    ///////////////////////////////////////////////////////////

    typedef union  TAVIO_debug_ctrl_Ctrl0
          { UNSG32 u32[1];
            struct {
            struct w32AVIO_debug_ctrl_Ctrl0;
                   };
                 } TAVIO_debug_ctrl_Ctrl0;

    ///////////////////////////////////////////////////////////
     SIGN32 AVIO_debug_ctrl_drvrd(SIE_AVIO_debug_ctrl *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AVIO_debug_ctrl_drvwr(SIE_AVIO_debug_ctrl *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AVIO_debug_ctrl_reset(SIE_AVIO_debug_ctrl *p);
     SIGN32 AVIO_debug_ctrl_cmp  (SIE_AVIO_debug_ctrl *p, SIE_AVIO_debug_ctrl *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AVIO_debug_ctrl_check(p,pie,pfx,hLOG) AVIO_debug_ctrl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AVIO_debug_ctrl_print(p,    pfx,hLOG) AVIO_debug_ctrl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AVIO_debug_ctrl
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AVPLL_WRAP              biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 AVPLL_CLK1_CTRL      (P)
///               ###
///               * Clock controls for AVPLL CLK after AVPLL
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %unsigned 1  clkEn                     0x0
///                                    ###
///                                    * Clock enable for AVPLL.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00004 CTRL0                (P)
///               %unsigned 1  clk_div_bypass1           0x1
///                                    ###
///                                    * *INTERNAL_ONLY**
///                                    * Not Used
///                                    ###
///               %unsigned 2  I2S_BCLKI_SEL             0x1
///                                    ###
///                                    * Register used for I2S/TDM bit clock selection
///                                    * 0: I2S1 BCLK input (Primary BCLK)
///                                    * 1: I2S2 BCLK input (MIC1 BCLK)
///                                    * 2: I2S3 BCLK input (MIC2/Secondary BCLK)
///                                    * 3: Not used
///                                    ###
///               %unsigned 2  clk_sel0                  0x2
///                                    ###
///                                    * Register used for clock selection
///                                    * 0: AVPLL loop back clock
///                                    * 1: SPDIRX bit Clock
///                                    * 2: I2S/TDM bit clock
///                                    * 3: Not used
///                                    ###
///               %unsigned 1  clk_sel1                  0x0
///                                    ###
///                                    * Register used for clock selection
///                                    * 0: AVPLL ref clock (source clock)
///                                    * 1: I2S or SPDIFRX or AVPLL loop back clock
///                                    ###
///               %unsigned 1  clkOut_sel                0x0
///                                    ###
///                                    * 0: select CLKO output clock from PLL (which is divide by post divider P=DP[2:0])
///                                    * 1: select CLKO1 output clock from PLL (which is divided by post divider1 P1=DP1[2:0])
///                                    * As per spec : Only CLKO used for audio configuration. CLKO1 used for Top level configuration.
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x00008                      (P)
///     # 0x00008 AVPLL                
///               $avPll               AVPLL             REG          
///                                    ###
///                                    * All the registers for AVPLL
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     105b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AVPLL_WRAP
#define h_AVPLL_WRAP (){}

    #define     RA_AVPLL_WRAP_AVPLL_CLK1_CTRL                  0x0000

    #define     BA_AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch        0x0000
    #define     B16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch        0x0000
    #define   LSb32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch           0
    #define   LSb16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch           0
    #define       bAVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch        1
    #define   MSK32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch           0x00000001

    #define     BA_AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch      0x0000
    #define     B16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch      0x0000
    #define   LSb32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch         1
    #define   LSb16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch         1
    #define       bAVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch      1
    #define   MSK32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch         0x00000002

    #define     BA_AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel           0x0000
    #define     B16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel           0x0000
    #define   LSb32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel              2
    #define   LSb16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel              2
    #define       bAVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel           3
    #define   MSK32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel              0x0000001C
    #define        AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel_d2                     0x1
    #define        AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel_d4                     0x2
    #define        AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel_d6                     0x3
    #define        AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel_d8                     0x4
    #define        AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel_d12                    0x5

    #define     BA_AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn            0x0000
    #define     B16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn            0x0000
    #define   LSb32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn               5
    #define   LSb16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn               5
    #define       bAVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn            1
    #define   MSK32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn               0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_AVPLL_WRAP_CTRL0                            0x0004

    #define     BA_AVPLL_WRAP_CTRL0_clk_div_bypass1            0x0004
    #define     B16AVPLL_WRAP_CTRL0_clk_div_bypass1            0x0004
    #define   LSb32AVPLL_WRAP_CTRL0_clk_div_bypass1               0
    #define   LSb16AVPLL_WRAP_CTRL0_clk_div_bypass1               0
    #define       bAVPLL_WRAP_CTRL0_clk_div_bypass1            1
    #define   MSK32AVPLL_WRAP_CTRL0_clk_div_bypass1               0x00000001

    #define     BA_AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL              0x0004
    #define     B16AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL              0x0004
    #define   LSb32AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL                 1
    #define   LSb16AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL                 1
    #define       bAVPLL_WRAP_CTRL0_I2S_BCLKI_SEL              2
    #define   MSK32AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL                 0x00000006

    #define     BA_AVPLL_WRAP_CTRL0_clk_sel0                   0x0004
    #define     B16AVPLL_WRAP_CTRL0_clk_sel0                   0x0004
    #define   LSb32AVPLL_WRAP_CTRL0_clk_sel0                      3
    #define   LSb16AVPLL_WRAP_CTRL0_clk_sel0                      3
    #define       bAVPLL_WRAP_CTRL0_clk_sel0                   2
    #define   MSK32AVPLL_WRAP_CTRL0_clk_sel0                      0x00000018

    #define     BA_AVPLL_WRAP_CTRL0_clk_sel1                   0x0004
    #define     B16AVPLL_WRAP_CTRL0_clk_sel1                   0x0004
    #define   LSb32AVPLL_WRAP_CTRL0_clk_sel1                      5
    #define   LSb16AVPLL_WRAP_CTRL0_clk_sel1                      5
    #define       bAVPLL_WRAP_CTRL0_clk_sel1                   1
    #define   MSK32AVPLL_WRAP_CTRL0_clk_sel1                      0x00000020

    #define     BA_AVPLL_WRAP_CTRL0_clkOut_sel                 0x0004
    #define     B16AVPLL_WRAP_CTRL0_clkOut_sel                 0x0004
    #define   LSb32AVPLL_WRAP_CTRL0_clkOut_sel                    6
    #define   LSb16AVPLL_WRAP_CTRL0_clkOut_sel                    6
    #define       bAVPLL_WRAP_CTRL0_clkOut_sel                 1
    #define   MSK32AVPLL_WRAP_CTRL0_clkOut_sel                    0x00000040
    ///////////////////////////////////////////////////////////
    #define     RA_AVPLL_WRAP_AVPLL                            0x0008
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AVPLL_WRAP {
    ///////////////////////////////////////////////////////////
    #define   GET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch(r32)   _BFGET_(r32, 0, 0)
    #define   SET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch(r16)   _BFGET_(r16, 0, 0)
    #define   SET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSwitch(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch(r32) _BFGET_(r32, 1, 1)
    #define   SET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch(r16) _BFGET_(r16, 1, 1)
    #define   SET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkD3Switch(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel(r32)      _BFGET_(r32, 4, 2)
    #define   SET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel(r32,v)    _BFSET_(r32, 4, 2,v)
    #define   GET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel(r16)      _BFGET_(r16, 4, 2)
    #define   SET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkSel(r16,v)    _BFSET_(r16, 4, 2,v)

    #define   GET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn(r32)       _BFGET_(r32, 5, 5)
    #define   SET32AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn(r32,v)     _BFSET_(r32, 5, 5,v)
    #define   GET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn(r16)       _BFGET_(r16, 5, 5)
    #define   SET16AVPLL_WRAP_AVPLL_CLK1_CTRL_clkEn(r16,v)     _BFSET_(r16, 5, 5,v)

    #define     w32AVPLL_WRAP_AVPLL_CLK1_CTRL                  {\
            UNSG32 uAVPLL_CLK1_CTRL_clkSwitch                  :  1;\
            UNSG32 uAVPLL_CLK1_CTRL_clkD3Switch                :  1;\
            UNSG32 uAVPLL_CLK1_CTRL_clkSel                     :  3;\
            UNSG32 uAVPLL_CLK1_CTRL_clkEn                      :  1;\
            UNSG32 RSVDx0_b6                                   : 26;\
          }
    union { UNSG32 u32AVPLL_WRAP_AVPLL_CLK1_CTRL;
            struct w32AVPLL_WRAP_AVPLL_CLK1_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVPLL_WRAP_CTRL0_clk_div_bypass1(r32)       _BFGET_(r32, 0, 0)
    #define   SET32AVPLL_WRAP_CTRL0_clk_div_bypass1(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16AVPLL_WRAP_CTRL0_clk_div_bypass1(r16)       _BFGET_(r16, 0, 0)
    #define   SET16AVPLL_WRAP_CTRL0_clk_div_bypass1(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL(r32)         _BFGET_(r32, 2, 1)
    #define   SET32AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL(r32,v)       _BFSET_(r32, 2, 1,v)
    #define   GET16AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL(r16)         _BFGET_(r16, 2, 1)
    #define   SET16AVPLL_WRAP_CTRL0_I2S_BCLKI_SEL(r16,v)       _BFSET_(r16, 2, 1,v)

    #define   GET32AVPLL_WRAP_CTRL0_clk_sel0(r32)              _BFGET_(r32, 4, 3)
    #define   SET32AVPLL_WRAP_CTRL0_clk_sel0(r32,v)            _BFSET_(r32, 4, 3,v)
    #define   GET16AVPLL_WRAP_CTRL0_clk_sel0(r16)              _BFGET_(r16, 4, 3)
    #define   SET16AVPLL_WRAP_CTRL0_clk_sel0(r16,v)            _BFSET_(r16, 4, 3,v)

    #define   GET32AVPLL_WRAP_CTRL0_clk_sel1(r32)              _BFGET_(r32, 5, 5)
    #define   SET32AVPLL_WRAP_CTRL0_clk_sel1(r32,v)            _BFSET_(r32, 5, 5,v)
    #define   GET16AVPLL_WRAP_CTRL0_clk_sel1(r16)              _BFGET_(r16, 5, 5)
    #define   SET16AVPLL_WRAP_CTRL0_clk_sel1(r16,v)            _BFSET_(r16, 5, 5,v)

    #define   GET32AVPLL_WRAP_CTRL0_clkOut_sel(r32)            _BFGET_(r32, 6, 6)
    #define   SET32AVPLL_WRAP_CTRL0_clkOut_sel(r32,v)          _BFSET_(r32, 6, 6,v)
    #define   GET16AVPLL_WRAP_CTRL0_clkOut_sel(r16)            _BFGET_(r16, 6, 6)
    #define   SET16AVPLL_WRAP_CTRL0_clkOut_sel(r16,v)          _BFSET_(r16, 6, 6,v)

    #define     w32AVPLL_WRAP_CTRL0                            {\
            UNSG32 uCTRL0_clk_div_bypass1                      :  1;\
            UNSG32 uCTRL0_I2S_BCLKI_SEL                        :  2;\
            UNSG32 uCTRL0_clk_sel0                             :  2;\
            UNSG32 uCTRL0_clk_sel1                             :  1;\
            UNSG32 uCTRL0_clkOut_sel                           :  1;\
            UNSG32 RSVDx4_b7                                   : 25;\
          }
    union { UNSG32 u32AVPLL_WRAP_CTRL0;
            struct w32AVPLL_WRAP_CTRL0;
          };
    ///////////////////////////////////////////////////////////
              SIE_avPll                                        ie_AVPLL;
    ///////////////////////////////////////////////////////////
    } SIE_AVPLL_WRAP;

    typedef union  T32AVPLL_WRAP_AVPLL_CLK1_CTRL
          { UNSG32 u32;
            struct w32AVPLL_WRAP_AVPLL_CLK1_CTRL;
                 } T32AVPLL_WRAP_AVPLL_CLK1_CTRL;
    typedef union  T32AVPLL_WRAP_CTRL0
          { UNSG32 u32;
            struct w32AVPLL_WRAP_CTRL0;
                 } T32AVPLL_WRAP_CTRL0;
    ///////////////////////////////////////////////////////////

    typedef union  TAVPLL_WRAP_AVPLL_CLK1_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32AVPLL_WRAP_AVPLL_CLK1_CTRL;
                   };
                 } TAVPLL_WRAP_AVPLL_CLK1_CTRL;
    typedef union  TAVPLL_WRAP_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32AVPLL_WRAP_CTRL0;
                   };
                 } TAVPLL_WRAP_CTRL0;

    ///////////////////////////////////////////////////////////
     SIGN32 AVPLL_WRAP_drvrd(SIE_AVPLL_WRAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AVPLL_WRAP_drvwr(SIE_AVPLL_WRAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AVPLL_WRAP_reset(SIE_AVPLL_WRAP *p);
     SIGN32 AVPLL_WRAP_cmp  (SIE_AVPLL_WRAP *p, SIE_AVPLL_WRAP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AVPLL_WRAP_check(p,pie,pfx,hLOG) AVPLL_WRAP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AVPLL_WRAP_print(p,    pfx,hLOG) AVPLL_WRAP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AVPLL_WRAP
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE avioGbl                 biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 AVPLL0_WRAP          
///               $AVPLL_WRAP          AVPLL0_WRAP       REG          
///                                    ###
///                                    * All the registers for AVPLL0 wrapper
///                                    ###
///     @ 0x00020                      (P)
///     # 0x00020 AVPLL1_WRAP          
///               $AVPLL_WRAP          AVPLL1_WRAP       REG          
///                                    ###
///                                    * All the registers for AVPLL1 wrapper
///                                    ###
///     @ 0x00040                      (P)
///     # 0x00040 AVIO_debug_ctrl      
///               $AVIO_debug_ctrl     AVIO_debug_ctrl   REG          
///     @ 0x00044 AVPLLA_CLK_EN        (P)
///               %unsigned 6  ctrl                      0x0
///                                    ###
///                                    * Gates the output of AVPLL0 and AVPLL1 after divider and before it is passed to any logic.
///                                    * Bit#2 : used for AVPLL0
///                                    * Bit#3 : used for AVPLL1
///                                    * other Bits : Not used
///                                    * 0: Disable channel output
///                                    * 1: Enable channel output
///                                    * SW should program this bit as 1 after programming the respective AVPLL channel to make sure that clean clock is passed to the logic.
///                                    ###
///               %unsigned 1  dbg_mux_sel               0x0
///                                    ###
///                                    * *INTERNAL_ONLY**
///                                    * Not used
///                                    * 0: CLKOUT_TSTfrom AVPLL is connected to Clock Debug pin.
///                                    * 1:CLKOUT_C1 from AVPLL is connected to Clock Debug pin.
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x00048 SWRST_CTRL           (P-)
///               ###
///               * Soft resets for various blocks inside AVIO.
///               ###
///               %unsigned 1  biuSyncRstn               0x1
///                                    ###
///                                    * Reset for VPP BIU and HDMI-Tx BIU.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  avpll0Rstn                0x1
///                                    ###
///                                    * When low Resets the SSC and Fraction function for AVPLL0
///                                    ###
///               %unsigned 1  avpll1Rstn                0x1
///                                    ###
///                                    * When low Resets the SSC and Fraction function for AVPLL1
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0004C SWPDWN_CTRL          (P-)
///               %unsigned 1  AVPLL0_PD                 0x1
///                                    ###
///                                    * 1: AVPLL0 power down
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  AVPLL1_PD                 0x1
///                                    ###
///                                    * 1: AVPLL1 power down
///                                    * 0: Normal operation
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00050 RWTC_31to0           (P)
///               ###
///               * *INTERNAL_ONLY**
///               * Not used
///               * rwtcBus[31:0]
///               ###
///               %unsigned 32 value                     0x999955AA
///                                    ###
///                                    * *INTERNAL_ONLY**
///                                    * Not used
///                                    * RTWC [31:0] value for AVIO internal memories.
///                                    ###
///     @ 0x00054 RWTC_57to32          (P)
///               ###
///               * *INTERNAL_ONLY**
///               * Not used
///               * rwtcBus[57:32]
///               ###
///               %unsigned 26 value                     0x1555BDE
///                                    ###
///                                    * *INTERNAL_ONLY**
///                                    * Not used
///                                    * RTWC [57:32] value for AVIO internal memories.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00058 CTRL                 (P)
///               %unsigned 1  AIODHUB_dyCG_en           0x1
///                                    ###
///                                    * 1: Enable To support dynamic gated clock for AIO DHUB
///                                    * 0: disable
///                                    ###
///               %unsigned 1  AIODHUB_swCG_en           0x1
///                                    ###
///                                    * 1: Enable To support software static gated clock for AIO DHUB
///                                    * 0: disable
///                                    ###
///               %unsigned 1  AIODHUB_CG_en             0x1
///                                    ###
///                                    * 0: Enable To support software/dynamic gated clock for AIO DHUB
///                                    * 1: free running
///                                    ###
///               %unsigned 4  INTR_EN                   
///                                    ###
///                                    * Bit:
///                                    * [0]: enable for SPDIF-RX Interrupt
///                                    * [1]: enable for SPDIF-RX CHOVR Interrupt
///                                    * [2]: enable for SPDIF-RX FPLL Lock Interrupt
///                                    * [3]: enable for BCM invalid request interrupt
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x0005C CTRL0                (P)
///               %unsigned 1  I2S1_MCLK_OEN             0x0
///                                    ###
///                                    * Enable control register used for external MCLK selection inside PinMux
///                                    ###
///               %unsigned 1  I2S3_BCLK_OEN             0x0
///                                    ###
///                                    * Enable control register used for I2S3 BCLK selection in PinMux
///                                    ###
///               %unsigned 1  I2S3_LRCLK_OEN            0x0
///                                    ###
///                                    * Enable control register used for I2S3 LRCLK selection inside PinMux
///                                    ###
///               %unsigned 4  dummy                     0x0
///                                    ###
///                                    * *INTERNAL_ONLY**
///                                    * Not used
///                                    ###
///               %%        25         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      96B, bits:     298b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_avioGbl
#define h_avioGbl (){}

    #define     RA_avioGbl_AVPLL0_WRAP                         0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_AVPLL1_WRAP                         0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_AVIO_debug_ctrl                     0x0040
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_AVPLLA_CLK_EN                       0x0044

    #define     BA_avioGbl_AVPLLA_CLK_EN_ctrl                  0x0044
    #define     B16avioGbl_AVPLLA_CLK_EN_ctrl                  0x0044
    #define   LSb32avioGbl_AVPLLA_CLK_EN_ctrl                     0
    #define   LSb16avioGbl_AVPLLA_CLK_EN_ctrl                     0
    #define       bavioGbl_AVPLLA_CLK_EN_ctrl                  6
    #define   MSK32avioGbl_AVPLLA_CLK_EN_ctrl                     0x0000003F

    #define     BA_avioGbl_AVPLLA_CLK_EN_dbg_mux_sel           0x0044
    #define     B16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel           0x0044
    #define   LSb32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel              6
    #define   LSb16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel              6
    #define       bavioGbl_AVPLLA_CLK_EN_dbg_mux_sel           1
    #define   MSK32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel              0x00000040
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_SWRST_CTRL                          0x0048

    #define     BA_avioGbl_SWRST_CTRL_biuSyncRstn              0x0048
    #define     B16avioGbl_SWRST_CTRL_biuSyncRstn              0x0048
    #define   LSb32avioGbl_SWRST_CTRL_biuSyncRstn                 0
    #define   LSb16avioGbl_SWRST_CTRL_biuSyncRstn                 0
    #define       bavioGbl_SWRST_CTRL_biuSyncRstn              1
    #define   MSK32avioGbl_SWRST_CTRL_biuSyncRstn                 0x00000001

    #define     BA_avioGbl_SWRST_CTRL_avpll0Rstn               0x0048
    #define     B16avioGbl_SWRST_CTRL_avpll0Rstn               0x0048
    #define   LSb32avioGbl_SWRST_CTRL_avpll0Rstn                  1
    #define   LSb16avioGbl_SWRST_CTRL_avpll0Rstn                  1
    #define       bavioGbl_SWRST_CTRL_avpll0Rstn               1
    #define   MSK32avioGbl_SWRST_CTRL_avpll0Rstn                  0x00000002

    #define     BA_avioGbl_SWRST_CTRL_avpll1Rstn               0x0048
    #define     B16avioGbl_SWRST_CTRL_avpll1Rstn               0x0048
    #define   LSb32avioGbl_SWRST_CTRL_avpll1Rstn                  2
    #define   LSb16avioGbl_SWRST_CTRL_avpll1Rstn                  2
    #define       bavioGbl_SWRST_CTRL_avpll1Rstn               1
    #define   MSK32avioGbl_SWRST_CTRL_avpll1Rstn                  0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_SWPDWN_CTRL                         0x004C

    #define     BA_avioGbl_SWPDWN_CTRL_AVPLL0_PD               0x004C
    #define     B16avioGbl_SWPDWN_CTRL_AVPLL0_PD               0x004C
    #define   LSb32avioGbl_SWPDWN_CTRL_AVPLL0_PD                  0
    #define   LSb16avioGbl_SWPDWN_CTRL_AVPLL0_PD                  0
    #define       bavioGbl_SWPDWN_CTRL_AVPLL0_PD               1
    #define   MSK32avioGbl_SWPDWN_CTRL_AVPLL0_PD                  0x00000001

    #define     BA_avioGbl_SWPDWN_CTRL_AVPLL1_PD               0x004C
    #define     B16avioGbl_SWPDWN_CTRL_AVPLL1_PD               0x004C
    #define   LSb32avioGbl_SWPDWN_CTRL_AVPLL1_PD                  1
    #define   LSb16avioGbl_SWPDWN_CTRL_AVPLL1_PD                  1
    #define       bavioGbl_SWPDWN_CTRL_AVPLL1_PD               1
    #define   MSK32avioGbl_SWPDWN_CTRL_AVPLL1_PD                  0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_RWTC_31to0                          0x0050

    #define     BA_avioGbl_RWTC_31to0_value                    0x0050
    #define     B16avioGbl_RWTC_31to0_value                    0x0050
    #define   LSb32avioGbl_RWTC_31to0_value                       0
    #define   LSb16avioGbl_RWTC_31to0_value                       0
    #define       bavioGbl_RWTC_31to0_value                    32
    #define   MSK32avioGbl_RWTC_31to0_value                       0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_RWTC_57to32                         0x0054

    #define     BA_avioGbl_RWTC_57to32_value                   0x0054
    #define     B16avioGbl_RWTC_57to32_value                   0x0054
    #define   LSb32avioGbl_RWTC_57to32_value                      0
    #define   LSb16avioGbl_RWTC_57to32_value                      0
    #define       bavioGbl_RWTC_57to32_value                   26
    #define   MSK32avioGbl_RWTC_57to32_value                      0x03FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_CTRL                                0x0058

    #define     BA_avioGbl_CTRL_AIODHUB_dyCG_en                0x0058
    #define     B16avioGbl_CTRL_AIODHUB_dyCG_en                0x0058
    #define   LSb32avioGbl_CTRL_AIODHUB_dyCG_en                   0
    #define   LSb16avioGbl_CTRL_AIODHUB_dyCG_en                   0
    #define       bavioGbl_CTRL_AIODHUB_dyCG_en                1
    #define   MSK32avioGbl_CTRL_AIODHUB_dyCG_en                   0x00000001

    #define     BA_avioGbl_CTRL_AIODHUB_swCG_en                0x0058
    #define     B16avioGbl_CTRL_AIODHUB_swCG_en                0x0058
    #define   LSb32avioGbl_CTRL_AIODHUB_swCG_en                   1
    #define   LSb16avioGbl_CTRL_AIODHUB_swCG_en                   1
    #define       bavioGbl_CTRL_AIODHUB_swCG_en                1
    #define   MSK32avioGbl_CTRL_AIODHUB_swCG_en                   0x00000002

    #define     BA_avioGbl_CTRL_AIODHUB_CG_en                  0x0058
    #define     B16avioGbl_CTRL_AIODHUB_CG_en                  0x0058
    #define   LSb32avioGbl_CTRL_AIODHUB_CG_en                     2
    #define   LSb16avioGbl_CTRL_AIODHUB_CG_en                     2
    #define       bavioGbl_CTRL_AIODHUB_CG_en                  1
    #define   MSK32avioGbl_CTRL_AIODHUB_CG_en                     0x00000004

    #define     BA_avioGbl_CTRL_INTR_EN                        0x0058
    #define     B16avioGbl_CTRL_INTR_EN                        0x0058
    #define   LSb32avioGbl_CTRL_INTR_EN                           3
    #define   LSb16avioGbl_CTRL_INTR_EN                           3
    #define       bavioGbl_CTRL_INTR_EN                        4
    #define   MSK32avioGbl_CTRL_INTR_EN                           0x00000078
    ///////////////////////////////////////////////////////////
    #define     RA_avioGbl_CTRL0                               0x005C

    #define     BA_avioGbl_CTRL0_I2S1_MCLK_OEN                 0x005C
    #define     B16avioGbl_CTRL0_I2S1_MCLK_OEN                 0x005C
    #define   LSb32avioGbl_CTRL0_I2S1_MCLK_OEN                    0
    #define   LSb16avioGbl_CTRL0_I2S1_MCLK_OEN                    0
    #define       bavioGbl_CTRL0_I2S1_MCLK_OEN                 1
    #define   MSK32avioGbl_CTRL0_I2S1_MCLK_OEN                    0x00000001

    #define     BA_avioGbl_CTRL0_I2S3_BCLK_OEN                 0x005C
    #define     B16avioGbl_CTRL0_I2S3_BCLK_OEN                 0x005C
    #define   LSb32avioGbl_CTRL0_I2S3_BCLK_OEN                    1
    #define   LSb16avioGbl_CTRL0_I2S3_BCLK_OEN                    1
    #define       bavioGbl_CTRL0_I2S3_BCLK_OEN                 1
    #define   MSK32avioGbl_CTRL0_I2S3_BCLK_OEN                    0x00000002

    #define     BA_avioGbl_CTRL0_I2S3_LRCLK_OEN                0x005C
    #define     B16avioGbl_CTRL0_I2S3_LRCLK_OEN                0x005C
    #define   LSb32avioGbl_CTRL0_I2S3_LRCLK_OEN                   2
    #define   LSb16avioGbl_CTRL0_I2S3_LRCLK_OEN                   2
    #define       bavioGbl_CTRL0_I2S3_LRCLK_OEN                1
    #define   MSK32avioGbl_CTRL0_I2S3_LRCLK_OEN                   0x00000004

    #define     BA_avioGbl_CTRL0_dummy                         0x005C
    #define     B16avioGbl_CTRL0_dummy                         0x005C
    #define   LSb32avioGbl_CTRL0_dummy                            3
    #define   LSb16avioGbl_CTRL0_dummy                            3
    #define       bavioGbl_CTRL0_dummy                         4
    #define   MSK32avioGbl_CTRL0_dummy                            0x00000078
    ///////////////////////////////////////////////////////////

    typedef struct SIE_avioGbl {
    ///////////////////////////////////////////////////////////
              SIE_AVPLL_WRAP                                   ie_AVPLL0_WRAP;
    ///////////////////////////////////////////////////////////
              SIE_AVPLL_WRAP                                   ie_AVPLL1_WRAP;
    ///////////////////////////////////////////////////////////
              SIE_AVIO_debug_ctrl                              ie_AVIO_debug_ctrl;
    ///////////////////////////////////////////////////////////
    #define   GET32avioGbl_AVPLLA_CLK_EN_ctrl(r32)             _BFGET_(r32, 5, 0)
    #define   SET32avioGbl_AVPLLA_CLK_EN_ctrl(r32,v)           _BFSET_(r32, 5, 0,v)
    #define   GET16avioGbl_AVPLLA_CLK_EN_ctrl(r16)             _BFGET_(r16, 5, 0)
    #define   SET16avioGbl_AVPLLA_CLK_EN_ctrl(r16,v)           _BFSET_(r16, 5, 0,v)

    #define   GET32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r32)      _BFGET_(r32, 6, 6)
    #define   SET32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r32,v)    _BFSET_(r32, 6, 6,v)
    #define   GET16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r16)      _BFGET_(r16, 6, 6)
    #define   SET16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r16,v)    _BFSET_(r16, 6, 6,v)

    #define     w32avioGbl_AVPLLA_CLK_EN                       {\
            UNSG32 uAVPLLA_CLK_EN_ctrl                         :  6;\
            UNSG32 uAVPLLA_CLK_EN_dbg_mux_sel                  :  1;\
            UNSG32 RSVDx44_b7                                  : 25;\
          }
    union { UNSG32 u32avioGbl_AVPLLA_CLK_EN;
            struct w32avioGbl_AVPLLA_CLK_EN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32avioGbl_SWRST_CTRL_biuSyncRstn(r32)         _BFGET_(r32, 0, 0)
    #define   SET32avioGbl_SWRST_CTRL_biuSyncRstn(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16avioGbl_SWRST_CTRL_biuSyncRstn(r16)         _BFGET_(r16, 0, 0)
    #define   SET16avioGbl_SWRST_CTRL_biuSyncRstn(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32avioGbl_SWRST_CTRL_avpll0Rstn(r32)          _BFGET_(r32, 1, 1)
    #define   SET32avioGbl_SWRST_CTRL_avpll0Rstn(r32,v)        _BFSET_(r32, 1, 1,v)
    #define   GET16avioGbl_SWRST_CTRL_avpll0Rstn(r16)          _BFGET_(r16, 1, 1)
    #define   SET16avioGbl_SWRST_CTRL_avpll0Rstn(r16,v)        _BFSET_(r16, 1, 1,v)

    #define   GET32avioGbl_SWRST_CTRL_avpll1Rstn(r32)          _BFGET_(r32, 2, 2)
    #define   SET32avioGbl_SWRST_CTRL_avpll1Rstn(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16avioGbl_SWRST_CTRL_avpll1Rstn(r16)          _BFGET_(r16, 2, 2)
    #define   SET16avioGbl_SWRST_CTRL_avpll1Rstn(r16,v)        _BFSET_(r16, 2, 2,v)

    #define     w32avioGbl_SWRST_CTRL                          {\
            UNSG32 uSWRST_CTRL_biuSyncRstn                     :  1;\
            UNSG32 uSWRST_CTRL_avpll0Rstn                      :  1;\
            UNSG32 uSWRST_CTRL_avpll1Rstn                      :  1;\
            UNSG32 RSVDx48_b3                                  : 29;\
          }
    union { UNSG32 u32avioGbl_SWRST_CTRL;
            struct w32avioGbl_SWRST_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32avioGbl_SWPDWN_CTRL_AVPLL0_PD(r32)          _BFGET_(r32, 0, 0)
    #define   SET32avioGbl_SWPDWN_CTRL_AVPLL0_PD(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16avioGbl_SWPDWN_CTRL_AVPLL0_PD(r16)          _BFGET_(r16, 0, 0)
    #define   SET16avioGbl_SWPDWN_CTRL_AVPLL0_PD(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32avioGbl_SWPDWN_CTRL_AVPLL1_PD(r32)          _BFGET_(r32, 1, 1)
    #define   SET32avioGbl_SWPDWN_CTRL_AVPLL1_PD(r32,v)        _BFSET_(r32, 1, 1,v)
    #define   GET16avioGbl_SWPDWN_CTRL_AVPLL1_PD(r16)          _BFGET_(r16, 1, 1)
    #define   SET16avioGbl_SWPDWN_CTRL_AVPLL1_PD(r16,v)        _BFSET_(r16, 1, 1,v)

    #define     w32avioGbl_SWPDWN_CTRL                         {\
            UNSG32 uSWPDWN_CTRL_AVPLL0_PD                      :  1;\
            UNSG32 uSWPDWN_CTRL_AVPLL1_PD                      :  1;\
            UNSG32 RSVDx4C_b2                                  : 30;\
          }
    union { UNSG32 u32avioGbl_SWPDWN_CTRL;
            struct w32avioGbl_SWPDWN_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32avioGbl_RWTC_31to0_value(r32)               _BFGET_(r32,31, 0)
    #define   SET32avioGbl_RWTC_31to0_value(r32,v)             _BFSET_(r32,31, 0,v)

    #define     w32avioGbl_RWTC_31to0                          {\
            UNSG32 uRWTC_31to0_value                           : 32;\
          }
    union { UNSG32 u32avioGbl_RWTC_31to0;
            struct w32avioGbl_RWTC_31to0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32avioGbl_RWTC_57to32_value(r32)              _BFGET_(r32,25, 0)
    #define   SET32avioGbl_RWTC_57to32_value(r32,v)            _BFSET_(r32,25, 0,v)

    #define     w32avioGbl_RWTC_57to32                         {\
            UNSG32 uRWTC_57to32_value                          : 26;\
            UNSG32 RSVDx54_b26                                 :  6;\
          }
    union { UNSG32 u32avioGbl_RWTC_57to32;
            struct w32avioGbl_RWTC_57to32;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32avioGbl_CTRL_AIODHUB_dyCG_en(r32)           _BFGET_(r32, 0, 0)
    #define   SET32avioGbl_CTRL_AIODHUB_dyCG_en(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16avioGbl_CTRL_AIODHUB_dyCG_en(r16)           _BFGET_(r16, 0, 0)
    #define   SET16avioGbl_CTRL_AIODHUB_dyCG_en(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32avioGbl_CTRL_AIODHUB_swCG_en(r32)           _BFGET_(r32, 1, 1)
    #define   SET32avioGbl_CTRL_AIODHUB_swCG_en(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16avioGbl_CTRL_AIODHUB_swCG_en(r16)           _BFGET_(r16, 1, 1)
    #define   SET16avioGbl_CTRL_AIODHUB_swCG_en(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32avioGbl_CTRL_AIODHUB_CG_en(r32)             _BFGET_(r32, 2, 2)
    #define   SET32avioGbl_CTRL_AIODHUB_CG_en(r32,v)           _BFSET_(r32, 2, 2,v)
    #define   GET16avioGbl_CTRL_AIODHUB_CG_en(r16)             _BFGET_(r16, 2, 2)
    #define   SET16avioGbl_CTRL_AIODHUB_CG_en(r16,v)           _BFSET_(r16, 2, 2,v)

    #define   GET32avioGbl_CTRL_INTR_EN(r32)                   _BFGET_(r32, 6, 3)
    #define   SET32avioGbl_CTRL_INTR_EN(r32,v)                 _BFSET_(r32, 6, 3,v)
    #define   GET16avioGbl_CTRL_INTR_EN(r16)                   _BFGET_(r16, 6, 3)
    #define   SET16avioGbl_CTRL_INTR_EN(r16,v)                 _BFSET_(r16, 6, 3,v)

    #define     w32avioGbl_CTRL                                {\
            UNSG32 uCTRL_AIODHUB_dyCG_en                       :  1;\
            UNSG32 uCTRL_AIODHUB_swCG_en                       :  1;\
            UNSG32 uCTRL_AIODHUB_CG_en                         :  1;\
            UNSG32 uCTRL_INTR_EN                               :  4;\
            UNSG32 RSVDx58_b7                                  : 25;\
          }
    union { UNSG32 u32avioGbl_CTRL;
            struct w32avioGbl_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32avioGbl_CTRL0_I2S1_MCLK_OEN(r32)            _BFGET_(r32, 0, 0)
    #define   SET32avioGbl_CTRL0_I2S1_MCLK_OEN(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16avioGbl_CTRL0_I2S1_MCLK_OEN(r16)            _BFGET_(r16, 0, 0)
    #define   SET16avioGbl_CTRL0_I2S1_MCLK_OEN(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32avioGbl_CTRL0_I2S3_BCLK_OEN(r32)            _BFGET_(r32, 1, 1)
    #define   SET32avioGbl_CTRL0_I2S3_BCLK_OEN(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16avioGbl_CTRL0_I2S3_BCLK_OEN(r16)            _BFGET_(r16, 1, 1)
    #define   SET16avioGbl_CTRL0_I2S3_BCLK_OEN(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32avioGbl_CTRL0_I2S3_LRCLK_OEN(r32)           _BFGET_(r32, 2, 2)
    #define   SET32avioGbl_CTRL0_I2S3_LRCLK_OEN(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16avioGbl_CTRL0_I2S3_LRCLK_OEN(r16)           _BFGET_(r16, 2, 2)
    #define   SET16avioGbl_CTRL0_I2S3_LRCLK_OEN(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32avioGbl_CTRL0_dummy(r32)                    _BFGET_(r32, 6, 3)
    #define   SET32avioGbl_CTRL0_dummy(r32,v)                  _BFSET_(r32, 6, 3,v)
    #define   GET16avioGbl_CTRL0_dummy(r16)                    _BFGET_(r16, 6, 3)
    #define   SET16avioGbl_CTRL0_dummy(r16,v)                  _BFSET_(r16, 6, 3,v)

    #define     w32avioGbl_CTRL0                               {\
            UNSG32 uCTRL0_I2S1_MCLK_OEN                        :  1;\
            UNSG32 uCTRL0_I2S3_BCLK_OEN                        :  1;\
            UNSG32 uCTRL0_I2S3_LRCLK_OEN                       :  1;\
            UNSG32 uCTRL0_dummy                                :  4;\
            UNSG32 RSVDx5C_b7                                  : 25;\
          }
    union { UNSG32 u32avioGbl_CTRL0;
            struct w32avioGbl_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    } SIE_avioGbl;

    typedef union  T32avioGbl_AVPLLA_CLK_EN
          { UNSG32 u32;
            struct w32avioGbl_AVPLLA_CLK_EN;
                 } T32avioGbl_AVPLLA_CLK_EN;
    typedef union  T32avioGbl_SWRST_CTRL
          { UNSG32 u32;
            struct w32avioGbl_SWRST_CTRL;
                 } T32avioGbl_SWRST_CTRL;
    typedef union  T32avioGbl_SWPDWN_CTRL
          { UNSG32 u32;
            struct w32avioGbl_SWPDWN_CTRL;
                 } T32avioGbl_SWPDWN_CTRL;
    typedef union  T32avioGbl_RWTC_31to0
          { UNSG32 u32;
            struct w32avioGbl_RWTC_31to0;
                 } T32avioGbl_RWTC_31to0;
    typedef union  T32avioGbl_RWTC_57to32
          { UNSG32 u32;
            struct w32avioGbl_RWTC_57to32;
                 } T32avioGbl_RWTC_57to32;
    typedef union  T32avioGbl_CTRL
          { UNSG32 u32;
            struct w32avioGbl_CTRL;
                 } T32avioGbl_CTRL;
    typedef union  T32avioGbl_CTRL0
          { UNSG32 u32;
            struct w32avioGbl_CTRL0;
                 } T32avioGbl_CTRL0;
    ///////////////////////////////////////////////////////////

    typedef union  TavioGbl_AVPLLA_CLK_EN
          { UNSG32 u32[1];
            struct {
            struct w32avioGbl_AVPLLA_CLK_EN;
                   };
                 } TavioGbl_AVPLLA_CLK_EN;
    typedef union  TavioGbl_SWRST_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32avioGbl_SWRST_CTRL;
                   };
                 } TavioGbl_SWRST_CTRL;
    typedef union  TavioGbl_SWPDWN_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32avioGbl_SWPDWN_CTRL;
                   };
                 } TavioGbl_SWPDWN_CTRL;
    typedef union  TavioGbl_RWTC_31to0
          { UNSG32 u32[1];
            struct {
            struct w32avioGbl_RWTC_31to0;
                   };
                 } TavioGbl_RWTC_31to0;
    typedef union  TavioGbl_RWTC_57to32
          { UNSG32 u32[1];
            struct {
            struct w32avioGbl_RWTC_57to32;
                   };
                 } TavioGbl_RWTC_57to32;
    typedef union  TavioGbl_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32avioGbl_CTRL;
                   };
                 } TavioGbl_CTRL;
    typedef union  TavioGbl_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32avioGbl_CTRL0;
                   };
                 } TavioGbl_CTRL0;

    ///////////////////////////////////////////////////////////
     SIGN32 avioGbl_drvrd(SIE_avioGbl *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 avioGbl_drvwr(SIE_avioGbl *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void avioGbl_reset(SIE_avioGbl *p);
     SIGN32 avioGbl_cmp  (SIE_avioGbl *p, SIE_avioGbl *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define avioGbl_check(p,pie,pfx,hLOG) avioGbl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define avioGbl_print(p,    pfx,hLOG) avioGbl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: avioGbl
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: avioGbl.h
////////////////////////////////////////////////////////////

